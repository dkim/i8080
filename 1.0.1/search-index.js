var searchIndex = JSON.parse('{\
"i8080":{"doc":"","i":[[3,"Intel8080","i8080","An Intel 8080 system.",null,null],[12,"cpu","","An Intel 8080 CPU.",0,null],[12,"memory","","A 64K memory.",0,null],[4,"Error","","An error that can occur in this crate.",null,null],[13,"FileNotFound","","The specified file was not found.",1,null],[12,"path","i8080::Error","",2,null],[12,"source","","",2,null],[12,"backtrace","","",2,null],[13,"InterruptNotEnabled","i8080","An interrupt request arrived when the interrupt system was…",1,null],[13,"Io","","An I/O error.",1,null],[12,"source","i8080::Error","",3,null],[12,"backtrace","","",3,null],[13,"TooLargeFile","i8080","The specified file was too large to load at the specified…",1,null],[12,"path","i8080::Error","",4,null],[12,"size","","",4,null],[12,"start_address","","",4,null],[13,"Halted","i8080","An attempt to fetch and execute an instruction was made…",1,null],[0,"cpu","","",null,null],[3,"Cpu","i8080::cpu","An Intel 8080 CPU.",null,null],[12,"pc","","Program counter.",5,null],[12,"sp","","Stack pointer.",5,null],[12,"b","","Register B.",5,null],[12,"c","","Register C.",5,null],[12,"d","","Register D.",5,null],[12,"e","","Register E.",5,null],[12,"h","","Register H.",5,null],[12,"l","","Register L.",5,null],[12,"a","","Accumulator.",5,null],[12,"condition_flags","","Condition flags.",5,null],[3,"ConditionFlags","","A byte that holds the settings of the condition flags:",null,null],[6,"Instruction","","A type alias for `[u8; 3]` that represents an instruction.…",null,null],[11,"fetch_execute_instruction","","Fetches and executes an instruction, returning it with the…",5,[[["memory",3]],["result",6]]],[11,"interrupt","","Escapes from the halt state, if necessary, and executes…",5,[[["instruction",6],["memory",3]],["result",6]]],[18,"CARRY","","",6,null],[18,"ALWAYS_ONE","","",6,null],[18,"PARITY","","",6,null],[18,"AUX_CARRY","","",6,null],[18,"ZERO","","",6,null],[18,"SIGN","","",6,null],[11,"empty","","Returns an empty set of flags",6,[[],["conditionflags",3]]],[11,"all","","Returns the set containing all flags.",6,[[],["conditionflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",6,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",6,[[],[["conditionflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",6,[[],["conditionflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",6,[[],["conditionflags",3]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",6,[[]]],[11,"is_all","","Returns `true` if all flags are currently set.",6,[[]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",6,[[["conditionflags",3]]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",6,[[["conditionflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",6,[[["conditionflags",3]]]],[11,"remove","","Removes the specified flags in-place.",6,[[["conditionflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",6,[[["conditionflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the…",6,[[["conditionflags",3]]]],[0,"memory","i8080","",null,null],[3,"Memory","i8080::memory","A 64K memory.",null,null],[11,"new","","Creates a 64K memory.",7,[[]]],[11,"load_files","","Loads ROM files located at `paths` into memory starting at…",7,[[],["result",6]]],[11,"load_file","","Loads a ROM file located at `path` into memory starting at…",7,[[["asref",8],["path",3]],["result",6]]],[6,"Result","i8080","A specialized `std::result::Result` type for this crate.",null,null],[11,"new","","Creates an Intel 8080 system by loading ROM files located…",0,[[],["result",6]]],[11,"fetch_execute_instruction","","Fetches and executes an instruction, returning it with the…",0,[[],["result",6]]],[11,"interrupt","","Escapes from the halt state, if necessary, and executes…",0,[[["instruction",6]],["result",6]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","i8080::cpu","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","i8080::memory","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","i8080","",1,[[["error",3]]]],[11,"extend","i8080::cpu","",6,[[["intoiterator",8]]]],[11,"clone","","",6,[[],["conditionflags",3]]],[11,"default","","",5,[[],["cpu",3]]],[11,"default","","",6,[[]]],[11,"default","i8080::memory","",7,[[]]],[11,"default","i8080","",0,[[],["intel8080",3]]],[11,"cmp","i8080::cpu","",6,[[["conditionflags",3]],["ordering",4]]],[11,"eq","","",6,[[["conditionflags",3]]]],[11,"ne","","",6,[[["conditionflags",3]]]],[11,"partial_cmp","","",6,[[["conditionflags",3]],[["ordering",4],["option",4]]]],[11,"lt","","",6,[[["conditionflags",3]]]],[11,"le","","",6,[[["conditionflags",3]]]],[11,"gt","","",6,[[["conditionflags",3]]]],[11,"ge","","",6,[[["conditionflags",3]]]],[11,"deref","i8080::memory","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"fmt","i8080::cpu","",6,[[["formatter",3]],["result",6]]],[11,"fmt","i8080","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"sub","i8080::cpu","Returns the set difference of the two sets of flags.",6,[[["conditionflags",3]],["conditionflags",3]]],[11,"sub_assign","","Disables all flags enabled in the set.",6,[[["conditionflags",3]]]],[11,"not","","Returns the complement of this set of flags.",6,[[],["conditionflags",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",6,[[["conditionflags",3]],["conditionflags",3]]],[11,"bitor","","Returns the union of the two sets of flags.",6,[[["conditionflags",3]],["conditionflags",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",6,[[["conditionflags",3]],["conditionflags",3]]],[11,"bitand_assign","","Disables all flags disabled in the set.",6,[[["conditionflags",3]]]],[11,"bitor_assign","","Adds the set of flags.",6,[[["conditionflags",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",6,[[["conditionflags",3]]]],[11,"index","i8080::memory","",7,[[]]],[11,"index","","",7,[[["range",3]]]],[11,"index","","",7,[[["rangefrom",3]]]],[11,"index_mut","","",7,[[]]],[11,"index_mut","","",7,[[["range",3]]]],[11,"index_mut","","",7,[[["rangefrom",3]]]],[11,"hash","i8080::cpu","",6,[[]]],[11,"from_iter","","",6,[[["intoiterator",8]],["conditionflags",3]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"source","i8080","",1,[[],[["error",8],["option",4]]]]],"p":[[3,"Intel8080"],[4,"Error"],[13,"FileNotFound"],[13,"Io"],[13,"TooLargeFile"],[3,"Cpu"],[3,"ConditionFlags"],[3,"Memory"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);